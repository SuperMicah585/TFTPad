import { useState, useEffect, useRef, useCallback } from 'react'
import { UserCheck, Mail, Users, Zap, Crown, ArrowRight, Calendar, Upload, Eye } from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'
import { studyGroupService } from '../services/studyGroupService'
import { userService } from '../services/userService'
import { studyGroupInviteService, type StudyGroupInvite } from '../services/studyGroupInviteService'
import { OAuthLoginModal } from './auth/OAuthLoginModal'
import { RiotConnectModal } from './auth/RiotConnectModal'
import { useImageUpload } from '../hooks/useImageUpload'
import { riotService } from '../services/riotService'

interface MyGroup {
  id: number;
  name: string;
  role: string;
  members: GroupMember[];
  total_elo: number;
  avg_elo?: number;
  created_date: string;
  description: string;
  max_members: number;
  current_members: number;
  meeting_schedule: string[];
  application_instructions: string;
  time?: string;
  timezone?: string;
  image_url?: string;
}

interface GroupMember {
  summoner_name: string;
  elo: number;
  owner: number;
  rank?: string;
  icon_id?: number;
  user_id?: number;
}

interface NewGroupData {
  name: string;
  description: string;
  meeting_schedule: string[];
  application_instructions: string;
  time: string;
  timezone: string;
}

interface GroupSettings {
  name: string;
  meeting_schedule: string[];
  description: string;
  application_instructions: string;
  time: string;
  timezone: string;
}

// Player Modal Component
function PlayerModal({ 
  player, 
  isOpen, 
  onClose 
}: { 
  player: any;
  isOpen: boolean;
  onClose: () => void;
}) {
  const [activeTab, setActiveTab] = useState<'about' | 'stats'>('about')
  const [leagueData, setLeagueData] = useState<any[]>([])
  const [profile, setProfile] = useState<any>(null)
  const [leagueDataLoading, setLeagueDataLoading] = useState(false)

  useEffect(() => {
    const fetchPlayerData = async () => {
      if (!isOpen || !player?.user_id) return
      
      const fetchPlayerLeagueData = async (userId: number) => {
        try {
          const riotAccount = await userService.getUserRiotAccount(userId)
          if (riotAccount?.riot_id) {
            const response = await fetch(`/api/tft-league/${riotAccount.riot_id}?user_id=${userId}`)
            if (response.ok) {
              return await response.json()
            }
          }
        } catch (error) {
          console.error('Error fetching league data:', error)
        }
        return []
      }

      const fetchPlayerProfile = async (userId: number) => {
        try {
          return await userService.getUserProfile(userId)
        } catch (error) {
          console.error('Error fetching profile:', error)
          return null
        }
      }
      
      setLeagueDataLoading(true)
      try {
        const [leagueResponse, profileResponse] = await Promise.all([
          fetchPlayerLeagueData(player.user_id),
          fetchPlayerProfile(player.user_id)
        ])
        setLeagueData(leagueResponse || [])
        setProfile(profileResponse)
      } catch (error) {
        console.error('Error fetching player data:', error)
      } finally {
        setLeagueDataLoading(false)
      }
    }

    fetchPlayerData()
  }, [isOpen, player?.user_id])

  const getRankedTftData = () => {
    return leagueData.filter(entry => entry.queueType === 'RANKED_TFT')
  }

  const getTurboTftData = () => {
    return leagueData.filter(entry => entry.queueType === 'RANKED_TFT_TURBO')
  }

  if (!isOpen || !player) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999] p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full h-[600px] overflow-y-auto flex flex-col relative">
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 z-10 bg-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg hover:bg-gray-100 transition-colors"
        >
          <div className="text-black font-bold">Ã—</div>
        </button>
        
        {/* Profile Header */}
        <div className="relative">
          <div className="h-32 bg-[#ff8889] relative">
            <div className="absolute -bottom-12 left-6">
              <div className="relative">
                <div className="w-28 h-28 rounded-full border-4 border-white overflow-hidden">
                  {player.icon_id ? (
                    <img
                      src={`https://ddragon.leagueoflegends.com/cdn/14.14.1/img/profileicon/${player.icon_id}.png`}
                      alt={`${player.summoner_name} profile icon`}
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement
                        target.style.display = 'none'
                      }}
                    />
                  ) : null}
                  <div 
                    className={`w-full h-full flex items-center justify-center font-bold text-3xl ${player.icon_id ? 'hidden' : 'flex'}`}
                    style={{ 
                      backgroundColor: ['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][player.user_id % 5],
                      color: getTextColor(['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][player.user_id % 5])
                    }}
                  >
                    {player.summoner_name.charAt(0).toUpperCase()}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="pt-16 pb-4 px-6">
            <h3 className="text-xl font-bold text-gray-800 mb-1">{player.summoner_name}</h3>
            <p className="text-gray-500 text-sm">Group Member</p>
          </div>
        </div>
        
        {/* Navigation Tabs */}
        <div className="px-6 border-b border-gray-200">
          <div className="flex space-x-6">
            <button 
              onClick={() => setActiveTab('about')}
              className={`transition-colors pb-2 border-b-2 ${
                activeTab === 'about' 
                  ? 'text-[#00c9ac] border-[#00c9ac]' 
                  : 'text-gray-500 hover:text-gray-800 border-transparent hover:border-[#00c9ac]'
              }`}
            >
              About Me
            </button>
            <button 
              onClick={() => setActiveTab('stats')}
              className={`transition-colors pb-2 border-b-2 ${
                activeTab === 'stats' 
                  ? 'text-[#00c9ac] border-[#00c9ac]' 
                  : 'text-gray-500 hover:text-gray-800 border-transparent hover:border-[#00c9ac]'
              }`}
            >
              TFT Stats
            </button>
          </div>
        </div>
        
        {/* Content */}
        <div className="flex-1 p-6">
          {activeTab === 'stats' ? (
            <StatsTab 
              leagueData={leagueData}
              leagueDataLoading={leagueDataLoading}
              getRankedTftData={getRankedTftData}
              getTurboTftData={getTurboTftData}
            />
          ) : (
            <AboutTab profile={profile} />
          )}
        </div>
      </div>
    </div>
  )
}

// Stats Tab Component
function StatsTab({ 
  leagueData, 
  leagueDataLoading, 
  getRankedTftData, 
  getTurboTftData 
}: {
  leagueData: any[];
  leagueDataLoading: boolean;
  getRankedTftData: () => any[];
  getTurboTftData: () => any[];
}) {
  if (leagueDataLoading) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#00c9ac] mx-auto mb-2"></div>
          <p className="text-gray-600">Loading TFT stats...</p>
        </div>
      </div>
    )
  }

  const rankedData = getRankedTftData()
  const turboData = getTurboTftData()

  if (rankedData.length === 0 && turboData.length === 0) {
    return (
      <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4 text-center">
        <p className="text-gray-600">No TFT stats available</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {rankedData.length > 0 && (
        <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-3">Ranked TFT</h4>
          {rankedData.map((entry, idx) => (
            <div key={idx} className="flex items-center justify-between p-3 bg-white rounded-lg border border-[#e6d7c3]">
              <div className="flex items-center gap-2">
                <span className="font-medium text-gray-800">{entry.tier} {entry.rank}</span>
                <span className="text-sm text-gray-500">{entry.leaguePoints} LP</span>
              </div>
              <div className="text-sm text-gray-500">
                {entry.wins}W {entry.losses}L
              </div>
            </div>
          ))}
        </div>
      )}
      
      {turboData.length > 0 && (
        <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-3">Turbo TFT</h4>
          {turboData.map((entry, idx) => (
            <div key={idx} className="flex items-center justify-between p-3 bg-white rounded-lg border border-[#e6d7c3]">
              <div className="flex items-center gap-3">
                <span className="font-medium text-gray-800">TURBO {entry.ratedTier}</span>
              </div>
              <div className="text-sm text-gray-500">
                {entry.wins}W {entry.losses}L
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

// About Tab Component
function AboutTab({ profile }: { profile: any }) {
  if (!profile) {
    return (
      <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4 text-center">
        <p className="text-gray-600">No profile data available</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {profile.description && (
        <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-2">About Me</h4>
          <p className="text-gray-700">{profile.description}</p>
        </div>
      )}
      
      {(profile.days && profile.days.length > 0) || profile.time ? (
        <div className="bg-[#fff6ea] border border-[#e6d7c3] rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-2">Availability</h4>
          <div className="space-y-2">
            {profile.days && profile.days.length > 0 && (
              <div className="flex items-center gap-2">
                <Calendar className="w-4 h-4 text-gray-500" />
                <span className="text-sm text-gray-700">
                  {profile.days.join(', ')}
                </span>
              </div>
            )}
            {profile.time && (
              <div className="flex items-center gap-2">
                <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>
                  {profile.time.charAt(0).toUpperCase() + profile.time.slice(1)}
                  {profile.timezone && ` (${profile.timezone})`}
                </span>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export function MyGroupsTab() {
  const { userId } = useAuth()
  const [myGroups, setMyGroups] = useState<MyGroup[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [invitations, setInvitations] = useState<StudyGroupInvite[]>([])
  const [invitationsLoading, setInvitationsLoading] = useState(false)
  
  // Cache state
  const [lastFetched, setLastFetched] = useState<number | null>(null)
  const [refreshTrigger, setRefreshTrigger] = useState(0)
  const CACHE_DURATION = 5 * 60 * 1000 // 5 minutes

  // Modal states
  const [showLoginModal, setShowLoginModal] = useState(false)
  const [showRiotModal, setShowRiotModal] = useState(false)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showPlayerModal, setShowPlayerModal] = useState(false)
  const [selectedPlayer, setSelectedPlayer] = useState<any>(null)

  // Group management states
  const [selectedGroup, setSelectedGroup] = useState<MyGroup | null>(null)
  const [members, setMembers] = useState<GroupMember[]>([])
  const [captain, setCaptain] = useState<string>('')
  const [activeSection, setActiveSection] = useState<'overview' | 'manage' | 'invitations'>('overview')
  const [groupSettings, setGroupSettings] = useState<GroupSettings>({
    name: '',
    meeting_schedule: [],
    description: '',
    application_instructions: '',
    time: '',
    timezone: ''
  })

  // Action states
  const [promoteLoading, setPromoteLoading] = useState<string | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [showLeaveConfirm, setShowLeaveConfirm] = useState(false)
  const [settingsLoading, setSettingsLoading] = useState(false)

  // Riot account check
  const [riotAccount, setRiotAccount] = useState<any>(null)

  // Image upload
  const { uploadImage } = useImageUpload()
  const [selectedImage, setSelectedImage] = useState<File | null>(null)
  const [imageUploading, setImageUploading] = useState(false)

  // Fetch user's study groups
  useEffect(() => {
    const fetchMyGroups = async () => {
      if (!userId) {
        setLoading(false)
        return
      }

      // Check if we have valid cached data
      const isCacheValid = lastFetched && (Date.now() - lastFetched < CACHE_DURATION)
      if (isCacheValid && myGroups.length > 0) {
        setLoading(false)
        return
      }

      try {
        setLoading(true)
        setError(null)
        
        // Get user's study group relationships
        const userStudyGroups = await studyGroupService.getUserStudyGroupsByUser(userId)
        
        // Transform the data to match the expected format
        const transformedGroups = await Promise.all(
          userStudyGroups.map(async (userGroup) => {
            const group = userGroup.study_group
            if (!group) return null
            
            try {
              // Get members for this group
              const groupMembers = await studyGroupService.getStudyGroupUsers(group.id)
              
              // Transform members to match expected format
              const members = groupMembers.map(member => ({
                summoner_name: member.summoner_name || 'Unknown User',
                elo: member.elo || 0,
                rank: member.rank || 'UNRANKED',
                owner: member.owner,
                icon_id: member.icon_id || undefined,
                user_id: member.user_id || undefined
              }))
              
              // Calculate average ELO
              const totalElo = members.reduce((sum, member) => sum + member.elo, 0);
              const avgElo = members.length > 0 ? Math.round(totalElo / members.length) : 0;
              
              return {
                id: group.id,
                name: group.group_name,
                role: userGroup.owner === 1 ? "captain" : "member",
                members: members,
                total_elo: totalElo,
                avg_elo: avgElo,
                created_date: group.created_at,
                description: group.description || "",
                max_members: 20,
                current_members: members.length,
                meeting_schedule: group.meeting_schedule || [],
                application_instructions: group.application_instructions || "",
                time: group.time || "",
                timezone: group.timezone || "",
                image_url: group.image_url || ""
              }
            } catch (memberError) {
              console.error(`Failed to fetch members for group ${group.id}:`, memberError)
              return {
                id: group.id,
                name: group.group_name,
                role: userGroup.owner === 1 ? "captain" : "member",
                members: [],
                total_elo: 0,
                avg_elo: 0,
                created_date: group.created_at,
                description: group.description || "",
                max_members: 20,
                current_members: 0,
                meeting_schedule: group.meeting_schedule || [],
                application_instructions: group.application_instructions || "",
                time: group.time || "",
                timezone: group.timezone || "",
                image_url: group.image_url || ""
              }
            }
          })
        )
        
        const validGroups = transformedGroups.filter(group => group !== null) as MyGroup[]
        setMyGroups(validGroups)
        setLastFetched(Date.now())
      } catch (error) {
        console.error('Error fetching study groups:', error)
        setError('Failed to load study groups')
      } finally {
        setLoading(false)
      }
    }

    fetchMyGroups()
  }, [userId, refreshTrigger])

  // Fetch invitations
  useEffect(() => {
    if (userId) {
      fetchInvitations()
    }
  }, [userId])

  const fetchInvitations = async () => {
    try {
      setInvitationsLoading(true)
      const response = await studyGroupInviteService.getUserInvites(userId!)
      setInvitations(response || [])
    } catch (error) {
      console.error('Error fetching invitations:', error)
    } finally {
      setInvitationsLoading(false)
    }
  }

  // Check Riot account
  useEffect(() => {
    if (userId) {
      checkRiotAccount()
    }
  }, [userId])

  const checkRiotAccount = async () => {
    try {
      const account = await userService.getUserRiotAccount(userId!)
      setRiotAccount(account)
    } catch (error) {
      console.error('Error checking Riot account:', error)
      setRiotAccount(null)
    }
  }

  // Image handling
  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setSelectedImage(file)
    }
  }

  const handleImageUpload = async (groupId: number) => {
    if (!selectedImage) return

    try {
      setImageUploading(true)
      const path = `group-${groupId}-${Date.now()}.jpg`
      const result = await uploadImage(selectedImage, path)
      
      if (result.data && !result.error) {
        // Update the study group with the new image URL
        await studyGroupService.updateStudyGroup(groupId, {
          image_url: result.data.url
        })
        // Refresh groups to show new image
        setRefreshTrigger(prev => prev + 1)
        setSelectedImage(null)
      }
    } catch (error) {
      console.error('Error uploading image:', error)
    } finally {
      setImageUploading(false)
    }
  }

  // Group creation
  const handleCreateGroup = async () => {
    // Implementation for creating a new group
    // This would typically involve a form modal
  }

  // Group management
  const handleMeetingScheduleChange = (day: string) => {
    setGroupSettings(prev => ({
      ...prev,
      meeting_schedule: prev.meeting_schedule.includes(day)
        ? prev.meeting_schedule.filter(d => d !== day)
        : [...prev.meeting_schedule, day]
    }))
  }

  const handleSwitchCaptain = async (newCaptainSummonerName: string) => {
    if (!selectedGroup) return

    try {
      setPromoteLoading(newCaptainSummonerName)
      await studyGroupService.switchCaptain(selectedGroup.id, newCaptainSummonerName)
      
      // Refresh groups
      setRefreshTrigger(prev => prev + 1)
      setSelectedGroup(null)
    } catch (error) {
      console.error('Error switching captain:', error)
    } finally {
      setPromoteLoading(null)
    }
  }

  const handleDeleteGroup = async () => {
    if (!selectedGroup) return

    try {
      await studyGroupService.deleteStudyGroup(selectedGroup.id, captain)
      setShowDeleteConfirm(false)
      setSelectedGroup(null)
      setRefreshTrigger(prev => prev + 1)
    } catch (error) {
      console.error('Error deleting group:', error)
    }
  }

  const handleRespondToInvite = async (inviteId: number, response: 'accept' | 'decline') => {
    try {
      await studyGroupInviteService.respondToInvite(inviteId, response)
      fetchInvitations()
      if (response === 'accept') {
        setRefreshTrigger(prev => prev + 1)
      }
    } catch (error) {
      console.error('Error responding to invite:', error)
    }
  }

  const handleLeaveGroup = async () => {
    if (!selectedGroup || !riotAccount) return

    try {
      await studyGroupService.leaveStudyGroup(selectedGroup.id, riotAccount.summoner_name)
      setShowLeaveConfirm(false)
      setSelectedGroup(null)
      setRefreshTrigger(prev => prev + 1)
    } catch (error) {
      console.error('Error leaving group:', error)
    }
  }

  const handleSaveGroupSettings = async () => {
    if (!selectedGroup) return

    try {
      setSettingsLoading(true)
      await studyGroupService.updateStudyGroup(selectedGroup.id, groupSettings)
      setRefreshTrigger(prev => prev + 1)
    } catch (error) {
      console.error('Error saving group settings:', error)
    } finally {
      setSettingsLoading(false)
    }
  }

  // Player modal handling
  const handlePlayerClick = async (member: any) => {
    if (member.user_id) {
      setSelectedPlayer(member)
      setShowPlayerModal(true)
    }
  }

  const closePlayerModal = () => {
    setShowPlayerModal(false)
    setSelectedPlayer(null)
  }

  return (
    <>
      <div className="p-6 min-h-[calc(100vh-200px)] flex flex-col">
        <div className="mb-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
            <div className="flex items-center gap-2">
              <h2 className="text-2xl font-bold text-gray-800">My Groups</h2>
              <div className="relative group">
                <UserCheck 
                  size={20} 
                  className="text-gray-500 hover:text-gray-700 cursor-help transition-colors" 
                />
                <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-[9999] hidden sm:block">
                  <div className="text-center">Manage groups you're part of and their settings</div>
                  <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-b-4 border-transparent border-b-gray-900"></div>
                </div>
              </div>
            </div>
            <button
              onClick={() => {
                if (!userId) {
                  setShowLoginModal(true);
                } else if (!riotAccount) {
                  setShowRiotModal(true);
                } else {
                  setShowCreateModal(true);
                }
              }}
              disabled={!userId || !riotAccount}
              className="text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 w-full sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
              style={{ backgroundColor: !userId || !riotAccount ? '#666' : '#964B00' }}
              onMouseEnter={(e) => {
                if (!userId || !riotAccount) return;
                e.currentTarget.style.backgroundColor = '#7c3a00';
              }}
              onMouseLeave={(e) => {
                if (!userId || !riotAccount) return;
                e.currentTarget.style.backgroundColor = '#964B00';
              }}
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              {!userId ? 'Sign In to Create Group' : !riotAccount ? 'Link Riot Account to Create Group' : 'Create New Group'}
            </button>
          </div>
        </div>

        {loading ? (
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-6 text-center flex-1 flex flex-col items-center justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-orange-600 mx-auto mb-4"></div>
            <h3 className="text-lg font-semibold text-orange-800 mb-2">Loading Your Groups</h3>
            <p className="text-orange-700">Please wait while we fetch your study groups...</p>
          </div>
        ) : error ? (
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center flex-1 flex flex-col items-center justify-center">
            <svg className="w-12 h-12 text-red-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            <h3 className="text-lg font-semibold text-red-800 mb-2">Error Loading Groups</h3>
            <p className="text-red-700 mb-4">{error}</p>
            <button 
              onClick={() => {
                setError(null)
                setRefreshTrigger(prev => prev + 1)
                setMyGroups([])
              }}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              Try Again
            </button>
          </div>
        ) : myGroups.length === 0 ? (
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-6 text-center flex-1 flex flex-col items-center justify-center">
            <UserCheck className="w-12 h-12 text-orange-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-orange-800 mb-2">No Groups Yet</h3>
            <p className="text-orange-700 mb-4">You haven't joined any study groups yet.</p>
            <button 
              onClick={() => window.location.href = '/study-groups/groups'}
              className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              Browse Groups
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {myGroups.map((group) => (
              <MyGroupCard 
                key={group.id} 
                group={group} 
                onTileClick={(group) => {
                  setSelectedGroup(group);
                  setMembers(group.members);
                  const captainMember = group.members.find((m: GroupMember) => m.owner === 1);
                  const currentCaptain = captainMember?.summoner_name || 'Unknown Captain';
                  setCaptain(currentCaptain);
                  setGroupSettings({
                    name: group.name,
                    meeting_schedule: group.meeting_schedule,
                    description: group.description,
                    application_instructions: group.application_instructions,
                    time: group.time || '',
                    timezone: group.timezone || ''
                  });
                }}
              />
            ))}
          </div>
        )}

        {/* Invitations Section */}
        {invitations.length > 0 && (
          <div className="mt-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Pending Invitations</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {invitations.map((invitation) => (
                <InvitationCard 
                  key={invitation.id} 
                  invitation={invitation} 
                  onRespond={handleRespondToInvite}
                />
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Player Modal */}
      <PlayerModal 
        player={selectedPlayer}
        isOpen={showPlayerModal}
        onClose={closePlayerModal}
      />

      {/* Auth Modals */}
      {showLoginModal && <OAuthLoginModal isOpen={showLoginModal} onClose={() => setShowLoginModal(false)} />}
      {showRiotModal && <RiotConnectModal isOpen={showRiotModal} onClose={() => setShowRiotModal(false)} userId={userId || 0} />}
    </>
  )
}

// Utility functions
function getRankIconUrl(rank: string): string {
  const rankIcons: { [key: string]: string } = {
    'iron+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Iron.png',
    'bronze+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Bronze.png',
    'silver+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Silver.png',
    'gold+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Gold.png',
    'platinum+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Platinum.png',
    'emerald+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Emerald.png',
    'diamond+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Diamond.png',
    'master+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Master.png',
    'grandmaster+': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_GrandMaster.png',
    'challenger': 'https://ddragon.leagueoflegends.com/cdn/13.24.1/img/tft-regalia/TFT_Regalia_Challenger.png',
  };
  return rankIcons[rank] || '';
}

function getRankTier(rank: string): string {
  if (!rank || rank === 'UNRANKED') return '';
  const firstWord = rank.split(' ')[0].toLowerCase();
  return firstWord;
}

function getTextColor(backgroundColor: string): string {
  if (backgroundColor === '#ffc77e' || backgroundColor === '#ffa65f') {
    return '#333333';
  }
  return '#ffffff';
}

// MyGroupCard Component
function MyGroupCard({ 
  group, 
  onTileClick
}: { 
  group: MyGroup
  onTileClick: (group: MyGroup) => void
}) {
  return (
    <div 
      className="border-2 rounded-lg p-4 hover:shadow-xl transition-all duration-200 shadow-md backdrop-blur-sm flex flex-col cursor-pointer group relative" 
      style={{ backgroundColor: '#fff6ea', borderColor: '#e6d7c3' }}
      onClick={() => onTileClick(group)}
    >
      <div className="absolute top-1/2 right-4 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <ArrowRight className="w-5 h-5" style={{ color: '#00c9ac' }} />
      </div>
      
      <div className="relative z-10 text-left w-full">
        <div className="hidden md:flex flex-col text-left w-full">
          <div className="mb-3 text-left w-full">
            <div className="flex items-center gap-3 mb-2">
              {group.image_url ? (
                <img
                  src={group.image_url}
                  alt={`${group.name} icon`}
                  className="w-12 h-12 rounded-lg object-cover border-2 border-gray-200"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.style.display = 'none';
                  }}
                />
              ) : (
                <div 
                  className="w-12 h-12 rounded-lg flex items-center justify-center border-2 border-gray-200 font-bold text-lg"
                  style={{ 
                    backgroundColor: ['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][group.id % 5],
                    color: getTextColor(['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][group.id % 5])
                  }}
                >
                  {group.name.charAt(0).toUpperCase()}
                </div>
              )}
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <h3 className="text-lg font-bold text-gray-800 truncate">{group.name}</h3>
                  <span className={`px-2 py-1 text-xs font-semibold rounded-full border ${
                    group.role === 'captain' 
                      ? 'bg-yellow-100 text-yellow-800 border-yellow-200' 
                      : 'bg-blue-100 text-blue-800 border-blue-200'
                  }`}>
                    {group.role === 'captain' ? 'Captain' : 'Member'}
                  </span>
                </div>
                <p className="text-xs text-gray-500">Created: {new Date(group.created_date).toLocaleDateString()}</p>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-3">
            <div className="bg-white rounded-lg p-3 border border-[#e6d7c3]">
              <div className="text-sm text-gray-500 mb-1">Members</div>
              <div className="text-lg font-semibold text-gray-800">{group.current_members}/{group.max_members}</div>
            </div>
            <div className="bg-white rounded-lg p-3 border border-[#e6d7c3]">
              <div className="text-sm text-gray-500 mb-1">Avg ELO</div>
              <div className="text-lg font-semibold text-gray-800">{group.avg_elo || 0}</div>
            </div>
          </div>
          
          {group.meeting_schedule && group.meeting_schedule.length > 0 && (
            <div className="mb-3">
              <div className="text-sm text-gray-500 mb-1">Meeting Days</div>
              <div className="flex flex-wrap gap-1">
                {group.meeting_schedule.map((day, idx) => (
                  <span key={idx} className="px-2 py-1 bg-[#564ec7] text-white text-xs rounded-full">
                    {day}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          {group.description && (
            <div className="mb-3">
              <div className="text-sm text-gray-500 mb-1">Description</div>
              <p className="text-sm text-gray-700 line-clamp-2">{group.description}</p>
            </div>
          )}
        </div>
        
        <div className="md:hidden">
          <div className="flex items-center gap-3 mb-2">
            {group.image_url ? (
              <img
                src={group.image_url}
                alt={`${group.name} icon`}
                className="w-10 h-10 rounded-lg object-cover border-2 border-gray-200"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.style.display = 'none';
                }}
              />
            ) : (
              <div 
                className="w-10 h-10 rounded-lg flex items-center justify-center border-2 border-gray-200 font-bold text-base"
                style={{ 
                  backgroundColor: ['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][group.id % 5],
                  color: getTextColor(['#964b00', '#b96823', '#de8741', '#ffa65f', '#ffc77e'][group.id % 5])
                }}
              >
                {group.name.charAt(0).toUpperCase()}
              </div>
            )}
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-1">
                <h3 className="text-base font-bold text-gray-800 truncate">{group.name}</h3>
                <span className={`px-2 py-1 text-xs font-semibold rounded-full border ${
                  group.role === 'captain' 
                    ? 'bg-yellow-100 text-yellow-800 border-yellow-200' 
                    : 'bg-blue-100 text-blue-800 border-blue-200'
                }`}>
                  {group.role === 'captain' ? 'Captain' : 'Member'}
                </span>
              </div>
              <p className="text-xs text-gray-500">Created: {new Date(group.created_date).toLocaleDateString()}</p>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-3 mb-3">
            <div className="bg-white rounded-lg p-2 border border-[#e6d7c3]">
              <div className="text-xs text-gray-500 mb-1">Members</div>
              <div className="text-sm font-semibold text-gray-800">{group.current_members}/{group.max_members}</div>
            </div>
            <div className="bg-white rounded-lg p-2 border border-[#e6d7c3]">
              <div className="text-xs text-gray-500 mb-1">Avg ELO</div>
              <div className="text-sm font-semibold text-gray-800">{group.avg_elo || 0}</div>
            </div>
          </div>
          
          {group.meeting_schedule && group.meeting_schedule.length > 0 && (
            <div className="mb-3">
              <div className="text-xs text-gray-500 mb-1">Meeting Days</div>
              <div className="flex flex-wrap gap-1">
                {group.meeting_schedule.map((day, idx) => (
                  <span key={idx} className="px-2 py-1 bg-[#564ec7] text-white text-xs rounded-full">
                    {day}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          {group.description && (
            <div className="mb-3">
              <div className="text-xs text-gray-500 mb-1">Description</div>
              <p className="text-xs text-gray-700 line-clamp-2">{group.description}</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// InvitationCard Component
function InvitationCard({ 
  invitation, 
  onRespond 
}: { 
  invitation: StudyGroupInvite;
  onRespond: (inviteId: number, response: 'accept' | 'decline') => void;
}) {
  return (
    <div className="border-2 rounded-lg p-4 hover:shadow-xl transition-all duration-200 shadow-md backdrop-blur-sm flex flex-col" style={{ backgroundColor: '#fff6ea', borderColor: '#e6d7c3' }}>
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-lg flex items-center justify-center border-2 border-gray-200 font-bold text-base" style={{ backgroundColor: '#564ec7', color: 'white' }}>
            {invitation.study_group?.group_name?.charAt(0).toUpperCase() || 'G'}
          </div>
          <div>
            <h3 className="text-base font-bold text-gray-800">{invitation.study_group?.group_name || 'Unknown Group'}</h3>
            <p className="text-xs text-gray-500">From: {invitation.sender_name}</p>
          </div>
        </div>
        <span className="px-2 py-1 bg-orange-100 text-orange-800 text-xs font-semibold rounded-full border border-orange-200">
          Pending
        </span>
      </div>
      
      {invitation.message && (
        <div className="mb-3">
          <p className="text-sm text-gray-700">{invitation.message}</p>
        </div>
      )}
      
      <div className="flex gap-2">
        <button
          onClick={() => onRespond(invitation.id, 'accept')}
          className="flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm"
        >
          Accept
        </button>
        <button
          onClick={() => onRespond(invitation.id, 'decline')}
          className="flex-1 bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm"
        >
          Decline
        </button>
      </div>
    </div>
  )
} 